// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package  api

import (
  easyjson "github.com/mailru/easyjson"
  jlexer "github.com/mailru/easyjson/jlexer"
  json "encoding/json"
  jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
   _ *json.RawMessage
   _ *jlexer.Lexer
   _ *jwriter.Writer
   _ easyjson.Marshaler
)

func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api(in *jlexer.Lexer, out *auth0Config) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "provider":
      out.Provider = string(in.String())
    case "domain":
      out.Domain = string(in.String())
    case "connection":
      out.Connection = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api(out *jwriter.Writer, in auth0Config) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"provider\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Provider))
  }
  {
    const prefix string = ",\"domain\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Domain))
  }
  {
    const prefix string = ",\"connection\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Connection))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v auth0Config) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v auth0Config) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *auth0Config) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *auth0Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api1(in *jlexer.Lexer, out *UserPage) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "start":
      out.Start = int(in.Int())
    case "limit":
      out.Limit = int(in.Int())
    case "length":
      out.Length = int(in.Int())
    case "users":
      if in.IsNull() {
        in.Skip()
        out.Users = nil
      } else {
        in.Delim('[')
        if out.Users == nil {
          if !in.IsDelim(']') {
            out.Users = make([]User, 0, 1)
          } else {
            out.Users = []User{}
          }
        } else { 
          out.Users = (out.Users)[:0]
        }
        for !in.IsDelim(']') {
          var v1 User
          (v1).UnmarshalEasyJSON(in)
          out.Users = append(out.Users, v1)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api1(out *jwriter.Writer, in UserPage) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"start\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.Start))
  }
  {
    const prefix string = ",\"limit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.Limit))
  }
  {
    const prefix string = ",\"length\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.Length))
  }
  {
    const prefix string = ",\"users\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Users == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v2, v3 := range in.Users {
        if v2 > 0 {
          out.RawByte(',')
        }
        (v3).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v UserPage) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api1(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPage) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api1(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPage) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api1(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api1(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api2(in *jlexer.Lexer, out *User) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "email":
      out.Email = string(in.String())
    case "email_verified":
      out.EmailVerified = bool(in.Bool())
    case "username":
      out.Username = string(in.String())
    case "phone_number":
      out.PhoneNumber = string(in.String())
    case "phone_verified":
      out.PhoneVerified = bool(in.Bool())
    case "user_id":
      out.UserID = string(in.String())
    case "created_at":
      out.CreatedAt = string(in.String())
    case "updated_at":
      out.UpdatedAt = string(in.String())
    case "identities":
      if in.IsNull() {
        in.Skip()
        out.Identities = nil
      } else {
        in.Delim('[')
        if out.Identities == nil {
          if !in.IsDelim(']') {
            out.Identities = make([]Identity, 0, 1)
          } else {
            out.Identities = []Identity{}
          }
        } else { 
          out.Identities = (out.Identities)[:0]
        }
        for !in.IsDelim(']') {
          var v4 Identity
          (v4).UnmarshalEasyJSON(in)
          out.Identities = append(out.Identities, v4)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "app_metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.AppMetadata = make(map[string]interface {})
        } else {
        out.AppMetadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v5 interface {}
          if m, ok := v5.(easyjson.Unmarshaler); ok {
          m.UnmarshalEasyJSON(in)
          } else if m, ok := v5.(json.Unmarshaler); ok {
          _ = m.UnmarshalJSON(in.Raw())
          } else {
            v5 = in.Interface()
          }
          (out.AppMetadata)[key] = v5
          in.WantComma()
        }
        in.Delim('}')
      }
    case "user_metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.UserMetadata = make(map[string]interface {})
        } else {
        out.UserMetadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v6 interface {}
          if m, ok := v6.(easyjson.Unmarshaler); ok {
          m.UnmarshalEasyJSON(in)
          } else if m, ok := v6.(json.Unmarshaler); ok {
          _ = m.UnmarshalJSON(in.Raw())
          } else {
            v6 = in.Interface()
          }
          (out.UserMetadata)[key] = v6
          in.WantComma()
        }
        in.Delim('}')
      }
    case "picture":
      out.Picture = string(in.String())
    case "name":
      out.Name = string(in.String())
    case "nickname":
      out.Nickname = string(in.String())
    case "multifactor":
      if in.IsNull() {
        in.Skip()
        out.Multifactor = nil
      } else {
        in.Delim('[')
        if out.Multifactor == nil {
          if !in.IsDelim(']') {
            out.Multifactor = make([]string, 0, 4)
          } else {
            out.Multifactor = []string{}
          }
        } else { 
          out.Multifactor = (out.Multifactor)[:0]
        }
        for !in.IsDelim(']') {
          var v7 string
          v7 = string(in.String())
          out.Multifactor = append(out.Multifactor, v7)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "last_ip":
      out.LastIP = string(in.String())
    case "last_login":
      out.LastLogin = string(in.String())
    case "logins_count":
      out.LoginsCount = int(in.Int())
    case "blocked":
      out.Blocked = bool(in.Bool())
    case "given_name":
      out.GivenName = string(in.String())
    case "family_name":
      out.FamilyName = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api2(out *jwriter.Writer, in User) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Email != "" {
    const prefix string = ",\"email\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Email))
  }
  if in.EmailVerified {
    const prefix string = ",\"email_verified\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.EmailVerified))
  }
  if in.Username != "" {
    const prefix string = ",\"username\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Username))
  }
  if in.PhoneNumber != "" {
    const prefix string = ",\"phone_number\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PhoneNumber))
  }
  if in.PhoneVerified {
    const prefix string = ",\"phone_verified\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.PhoneVerified))
  }
  if in.UserID != "" {
    const prefix string = ",\"user_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UserID))
  }
  if in.CreatedAt != "" {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.CreatedAt))
  }
  if in.UpdatedAt != "" {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UpdatedAt))
  }
  if len(in.Identities) != 0 {
    const prefix string = ",\"identities\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v8, v9 := range in.Identities {
        if v8 > 0 {
          out.RawByte(',')
        }
        (v9).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  if len(in.AppMetadata) != 0 {
    const prefix string = ",\"app_metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v10First := true
      for v10Name, v10Value := range in.AppMetadata {
        if v10First { v10First = false } else { out.RawByte(',') }
        out.String(string(v10Name))
        out.RawByte(':')
        if m, ok := v10Value.(easyjson.Marshaler); ok {
          m.MarshalEasyJSON(out)
        } else if m, ok := v10Value.(json.Marshaler); ok {
          out.Raw(m.MarshalJSON())
        } else {
          out.Raw(json.Marshal(v10Value))
        }
      }
      out.RawByte('}')
    }
  }
  if len(in.UserMetadata) != 0 {
    const prefix string = ",\"user_metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v11First := true
      for v11Name, v11Value := range in.UserMetadata {
        if v11First { v11First = false } else { out.RawByte(',') }
        out.String(string(v11Name))
        out.RawByte(':')
        if m, ok := v11Value.(easyjson.Marshaler); ok {
          m.MarshalEasyJSON(out)
        } else if m, ok := v11Value.(json.Marshaler); ok {
          out.Raw(m.MarshalJSON())
        } else {
          out.Raw(json.Marshal(v11Value))
        }
      }
      out.RawByte('}')
    }
  }
  if in.Picture != "" {
    const prefix string = ",\"picture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Picture))
  }
  if in.Name != "" {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  if in.Nickname != "" {
    const prefix string = ",\"nickname\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Nickname))
  }
  if len(in.Multifactor) != 0 {
    const prefix string = ",\"multifactor\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('[')
      for v12, v13 := range in.Multifactor {
        if v12 > 0 {
          out.RawByte(',')
        }
        out.String(string(v13))
      }
      out.RawByte(']')
    }
  }
  if in.LastIP != "" {
    const prefix string = ",\"last_ip\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.LastIP))
  }
  if in.LastLogin != "" {
    const prefix string = ",\"last_login\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.LastLogin))
  }
  if in.LoginsCount != 0 {
    const prefix string = ",\"logins_count\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.LoginsCount))
  }
  if in.Blocked {
    const prefix string = ",\"blocked\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Blocked))
  }
  if in.GivenName != "" {
    const prefix string = ",\"given_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GivenName))
  }
  if in.FamilyName != "" {
    const prefix string = ",\"family_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FamilyName))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api2(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api2(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api2(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api2(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api3(in *jlexer.Lexer, out *UpdateUserRequestData) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "app_metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.AppMetadata = make(map[string]interface {})
        } else {
        out.AppMetadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v14 interface {}
          if m, ok := v14.(easyjson.Unmarshaler); ok {
          m.UnmarshalEasyJSON(in)
          } else if m, ok := v14.(json.Unmarshaler); ok {
          _ = m.UnmarshalJSON(in.Raw())
          } else {
            v14 = in.Interface()
          }
          (out.AppMetadata)[key] = v14
          in.WantComma()
        }
        in.Delim('}')
      }
    case "blocked":
      out.Blocked = bool(in.Bool())
    case "client_id":
      out.ClientID = string(in.String())
    case "connection":
      out.Connection = string(in.String())
    case "email":
      out.Email = string(in.String())
    case "email_verified":
      out.EmailVerified = bool(in.Bool())
    case "password":
      out.Password = string(in.String())
    case "phone_number":
      out.PhoneNumber = string(in.String())
    case "phone_verified":
      out.PhoneVerified = bool(in.Bool())
    case "user_metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.UserMetadata = make(map[string]interface {})
        } else {
        out.UserMetadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v15 interface {}
          if m, ok := v15.(easyjson.Unmarshaler); ok {
          m.UnmarshalEasyJSON(in)
          } else if m, ok := v15.(json.Unmarshaler); ok {
          _ = m.UnmarshalJSON(in.Raw())
          } else {
            v15 = in.Interface()
          }
          (out.UserMetadata)[key] = v15
          in.WantComma()
        }
        in.Delim('}')
      }
    case "username":
      out.Username = string(in.String())
    case "verify_email":
      out.VerifyEmail = bool(in.Bool())
    case "verify_password":
      out.VerifyPassword = bool(in.Bool())
    case "verify_phone_number":
      out.VerifyPhoneNumber = bool(in.Bool())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api3(out *jwriter.Writer, in UpdateUserRequestData) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.AppMetadata) != 0 {
    const prefix string = ",\"app_metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v16First := true
      for v16Name, v16Value := range in.AppMetadata {
        if v16First { v16First = false } else { out.RawByte(',') }
        out.String(string(v16Name))
        out.RawByte(':')
        if m, ok := v16Value.(easyjson.Marshaler); ok {
          m.MarshalEasyJSON(out)
        } else if m, ok := v16Value.(json.Marshaler); ok {
          out.Raw(m.MarshalJSON())
        } else {
          out.Raw(json.Marshal(v16Value))
        }
      }
      out.RawByte('}')
    }
  }
  if in.Blocked {
    const prefix string = ",\"blocked\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Blocked))
  }
  if in.ClientID != "" {
    const prefix string = ",\"client_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ClientID))
  }
  if in.Connection != "" {
    const prefix string = ",\"connection\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Connection))
  }
  if in.Email != "" {
    const prefix string = ",\"email\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Email))
  }
  if in.EmailVerified {
    const prefix string = ",\"email_verified\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.EmailVerified))
  }
  if in.Password != "" {
    const prefix string = ",\"password\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Password))
  }
  if in.PhoneNumber != "" {
    const prefix string = ",\"phone_number\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PhoneNumber))
  }
  if in.PhoneVerified {
    const prefix string = ",\"phone_verified\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.PhoneVerified))
  }
  if len(in.UserMetadata) != 0 {
    const prefix string = ",\"user_metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v17First := true
      for v17Name, v17Value := range in.UserMetadata {
        if v17First { v17First = false } else { out.RawByte(',') }
        out.String(string(v17Name))
        out.RawByte(':')
        if m, ok := v17Value.(easyjson.Marshaler); ok {
          m.MarshalEasyJSON(out)
        } else if m, ok := v17Value.(json.Marshaler); ok {
          out.Raw(m.MarshalJSON())
        } else {
          out.Raw(json.Marshal(v17Value))
        }
      }
      out.RawByte('}')
    }
  }
  if in.Username != "" {
    const prefix string = ",\"username\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Username))
  }
  if in.VerifyEmail {
    const prefix string = ",\"verify_email\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.VerifyEmail))
  }
  if in.VerifyPassword {
    const prefix string = ",\"verify_password\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.VerifyPassword))
  }
  if in.VerifyPhoneNumber {
    const prefix string = ",\"verify_phone_number\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.VerifyPhoneNumber))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v UpdateUserRequestData) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api3(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateUserRequestData) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api3(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateUserRequestData) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api3(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateUserRequestData) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api3(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api4(in *jlexer.Lexer, out *SendVerificationEmailRequestData) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "user_id":
      out.UserID = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api4(out *jwriter.Writer, in SendVerificationEmailRequestData) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"user_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UserID))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v SendVerificationEmailRequestData) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api4(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVerificationEmailRequestData) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api4(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVerificationEmailRequestData) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api4(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVerificationEmailRequestData) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api4(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api5(in *jlexer.Lexer, out *Options) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "domain":
      out.Domain = string(in.String())
    case "client_id":
      out.ClientID = string(in.String())
    case "client_secret":
      out.ClientSecret = string(in.String())
    case "connection":
      out.Connection = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api5(out *jwriter.Writer, in Options) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"domain\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Domain))
  }
  {
    const prefix string = ",\"client_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ClientID))
  }
  {
    const prefix string = ",\"client_secret\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ClientSecret))
  }
  {
    const prefix string = ",\"connection\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Connection))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Options) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api5(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Options) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api5(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Options) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api5(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Options) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api5(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api6(in *jlexer.Lexer, out *Identity) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "connection":
      out.Connection = string(in.String())
    case "user_id":
      out.UserID = string(in.String())
    case "provider":
      out.Provider = string(in.String())
    case "isSocial":
      out.IsSocial = bool(in.Bool())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api6(out *jwriter.Writer, in Identity) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Connection != "" {
    const prefix string = ",\"connection\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Connection))
  }
  if in.UserID != "" {
    const prefix string = ",\"user_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UserID))
  }
  if in.Provider != "" {
    const prefix string = ",\"provider\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Provider))
  }
  if in.IsSocial {
    const prefix string = ",\"isSocial\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.IsSocial))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Identity) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api6(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identity) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api6(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Identity) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api6(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identity) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api6(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api7(in *jlexer.Lexer, out *GetUserRequestData) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "user_id":
      out.UserID = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api7(out *jwriter.Writer, in GetUserRequestData) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"user_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UserID))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v GetUserRequestData) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api7(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserRequestData) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api7(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserRequestData) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api7(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserRequestData) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api7(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api8(in *jlexer.Lexer, out *ErrorResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "statusCode":
      out.StatusCode = int(in.Int())
    case "error":
      out.ErrorTag = string(in.String())
    case "message":
      out.Message = string(in.String())
    case "errorCode":
      out.ErrorCode = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api8(out *jwriter.Writer, in ErrorResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"statusCode\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.StatusCode))
  }
  {
    const prefix string = ",\"error\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ErrorTag))
  }
  {
    const prefix string = ",\"message\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Message))
  }
  {
    const prefix string = ",\"errorCode\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ErrorCode))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v ErrorResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api8(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api8(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api8(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api8(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api9(in *jlexer.Lexer, out *CreateUserRequestData) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "app_metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.AppMetadata = make(map[string]interface {})
        } else {
        out.AppMetadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v18 interface {}
          if m, ok := v18.(easyjson.Unmarshaler); ok {
          m.UnmarshalEasyJSON(in)
          } else if m, ok := v18.(json.Unmarshaler); ok {
          _ = m.UnmarshalJSON(in.Raw())
          } else {
            v18 = in.Interface()
          }
          (out.AppMetadata)[key] = v18
          in.WantComma()
        }
        in.Delim('}')
      }
    case "connection":
      out.Connection = string(in.String())
    case "email":
      out.Email = string(in.String())
    case "email_verified":
      out.EmailVerified = bool(in.Bool())
    case "password":
      out.Password = string(in.String())
    case "phone_number":
      out.PhoneNumber = string(in.String())
    case "phone_verified":
      out.PhoneVerified = bool(in.Bool())
    case "user_metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.UserMetadata = make(map[string]interface {})
        } else {
        out.UserMetadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v19 interface {}
          if m, ok := v19.(easyjson.Unmarshaler); ok {
          m.UnmarshalEasyJSON(in)
          } else if m, ok := v19.(json.Unmarshaler); ok {
          _ = m.UnmarshalJSON(in.Raw())
          } else {
            v19 = in.Interface()
          }
          (out.UserMetadata)[key] = v19
          in.WantComma()
        }
        in.Delim('}')
      }
    case "username":
      out.Username = string(in.String())
    case "verify_email":
      out.VerifyEmail = bool(in.Bool())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api9(out *jwriter.Writer, in CreateUserRequestData) {
  out.RawByte('{')
  first := true
  _ = first
  if len(in.AppMetadata) != 0 {
    const prefix string = ",\"app_metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v20First := true
      for v20Name, v20Value := range in.AppMetadata {
        if v20First { v20First = false } else { out.RawByte(',') }
        out.String(string(v20Name))
        out.RawByte(':')
        if m, ok := v20Value.(easyjson.Marshaler); ok {
          m.MarshalEasyJSON(out)
        } else if m, ok := v20Value.(json.Marshaler); ok {
          out.Raw(m.MarshalJSON())
        } else {
          out.Raw(json.Marshal(v20Value))
        }
      }
      out.RawByte('}')
    }
  }
  {
    const prefix string = ",\"connection\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Connection))
  }
  if in.Email != "" {
    const prefix string = ",\"email\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Email))
  }
  if in.EmailVerified {
    const prefix string = ",\"email_verified\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.EmailVerified))
  }
  if in.Password != "" {
    const prefix string = ",\"password\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Password))
  }
  if in.PhoneNumber != "" {
    const prefix string = ",\"phone_number\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PhoneNumber))
  }
  if in.PhoneVerified {
    const prefix string = ",\"phone_verified\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.PhoneVerified))
  }
  if len(in.UserMetadata) != 0 {
    const prefix string = ",\"user_metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v21First := true
      for v21Name, v21Value := range in.UserMetadata {
        if v21First { v21First = false } else { out.RawByte(',') }
        out.String(string(v21Name))
        out.RawByte(':')
        if m, ok := v21Value.(easyjson.Marshaler); ok {
          m.MarshalEasyJSON(out)
        } else if m, ok := v21Value.(json.Marshaler); ok {
          out.Raw(m.MarshalJSON())
        } else {
          out.Raw(json.Marshal(v21Value))
        }
      }
      out.RawByte('}')
    }
  }
  if in.Username != "" {
    const prefix string = ",\"username\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Username))
  }
  if in.VerifyEmail {
    const prefix string = ",\"verify_email\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.VerifyEmail))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v CreateUserRequestData) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api9(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateUserRequestData) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api9(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateUserRequestData) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api9(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateUserRequestData) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api9(l, v)
}
func easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api10(in *jlexer.Lexer, out *Api) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api10(out *jwriter.Writer, in Api) {
  out.RawByte('{')
  first := true
  _ = first
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Api) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api10(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Api) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC1cedd36EncodeGithubComRaiProjectAuthAuth0Api10(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Api) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api10(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Api) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC1cedd36DecodeGithubComRaiProjectAuthAuth0Api10(l, v)
}
